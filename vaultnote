#!/bin/bash

# === CONFIGURATION ===
VAULT_ROOT="VAULT_ROOT"
DOCS_FOLDER="$VAULT_ROOT/Documentation"

# Check if running on Linux and /mnt/c/ exists
if [[ "$VAULT_ROOT" == /mnt/c/* ]] && [ ! -d "/mnt/c" ]; then
    echo -e "\e[31m✖ /mnt/c/ is not available. Are you running WSL or is the Windows partition mounted?\e[0m"
    exit 1
fi

# Check if VAULT_ROOT exists and is a directory
if [ ! -d "$VAULT_ROOT" ]; then
    echo -e "\e[31m✖ VAULT_ROOT directory does not exist: $VAULT_ROOT\e[0m"
    exit 1
fi

# Check if DOCS_FOLDER exists and is a directory
if [ ! -d "$DOCS_FOLDER" ]; then
    echo -e "\e[31m✖ Documentation folder does not exist: $DOCS_FOLDER\e[0m"
    exit 1
fi

# === FUNCTIONS ===

print_success() {
    echo -e "\e[32m✔ $1\e[0m"
}

print_error() {
    echo -e "\e[31m✖ $1\e[0m"
}

print_info() {
    echo -e "\e[34mℹ $1\e[0m"
}

copy_to_vault_root() {
    if [ ! -f "$1" ]; then
        print_error "Source file does not exist: $1"
        exit 1
    fi
    if cp "$1" "$VAULT_ROOT" 2>/dev/null; then
        print_success "Copied '$1' to KnowHub root: $VAULT_ROOT"
    else
        ERR_MSG=$(cp "$1" "$VAULT_ROOT" 2>&1)
        print_error "Failed to copy '$1' to KnowHub root: $VAULT_ROOT. Reason: $ERR_MSG"
        exit 1
    fi
}

copy_to_documentation() {
    if [ ! -f "$1" ]; then
        print_error "Source file does not exist: $1"
        exit 1
    fi
    if cp "$1" "$DOCS_FOLDER" 2>/dev/null; then
        print_success "Copied '$1' to KnowHub Documentation folder: $DOCS_FOLDER"
    else
        ERR_MSG=$(cp "$1" "$DOCS_FOLDER" 2>&1)
        print_error "Failed to copy '$1' to KnowHub Documentation folder: $DOCS_FOLDER. Reason: $ERR_MSG"
        exit 1
    fi
}

export_from_documentation() {
    if [ -z "$1" ] || [ -z "$2" ]; then
        print_error "Missing arguments. Usage: vaultnote -x file.txt /target"
        exit 1
    fi
    if [ ! -f "$DOCS_FOLDER/$1" ]; then
        print_error "Source file does not exist in Documentation: $DOCS_FOLDER/$1"
        exit 1
    fi
    if [ ! -d "$2" ]; then
        print_error "Export destination is not a directory: $2"
        exit 1
    fi
    if cp "$DOCS_FOLDER/$1" "$2" 2>/dev/null; then
        print_success "Exported '$1' from KnowHub Documentation to '$2'"
    else
        ERR_MSG=$(cp "$DOCS_FOLDER/$1" "$2" 2>&1)
        print_error "Failed to export '$1' from KnowHub Documentation to '$2'. Reason: $ERR_MSG"
        exit 1
    fi
}

usage() {
    echo "Usage:"
    echo "  $0 file.txt               → Copy to vault root"
    echo "  $0 -d file.txt           → Copy to Documentation folder"
    echo "  $0 -x file.txt /target   → Export from Documentation to /target"
    exit 1
}

# === PARSE ARGS ===

MODE="root"
FILE=""
EXPORT_FILE=""
EXPORT_DEST=""

# Use getopts for -d and -x
while getopts ":d:x:h" opt; do
    case $opt in
        d)
            MODE="doc"
            FILE="$OPTARG"
            ;;
        x)
            MODE="export"
            EXPORT_FILE="$OPTARG"
            EXPORT_DEST="${!OPTIND}"
            if [ -z "$EXPORT_DEST" ]; then
                echo "Error: -x requires a file and a destination"
                usage
            fi
            OPTIND=$((OPTIND + 1))
            ;;
        h)
            usage
            ;;
        :)
            echo "Error: -$OPTARG requires a value"
            usage
            ;;
        \?)
            echo "Invalid option: -$OPTARG"
            usage
            ;;
    esac
done
shift $((OPTIND -1))

# Handle positional argument for vault root copy
if [[ "$MODE" == "root" ]]; then
    if [ $# -ne 1 ]; then
        usage
    fi
    FILE="$1"
    copy_to_vault_root "$FILE"
    exit $?
elif [[ "$MODE" == "doc" ]]; then
    # Accept positional argument if FILE not set by getopts
    if [ -z "$FILE" ]; then
        if [ $# -eq 1 ]; then
            FILE="$1"
        else
            usage
        fi
    elif [ $# -ne 0 ]; then
        usage
    fi
    copy_to_documentation "$FILE"
    exit $?
elif [[ "$MODE" == "export" ]]; then
    # Accept positional arguments if EXPORT_FILE or EXPORT_DEST not set by getopts
    if [ -z "$EXPORT_FILE" ] && [ $# -ge 1 ]; then
        EXPORT_FILE="$1"
        shift
    fi
    if [ -z "$EXPORT_DEST" ] && [ $# -ge 1 ]; then
        EXPORT_DEST="$1"
        shift
    fi
    if [ -z "$EXPORT_FILE" ] || [ -z "$EXPORT_DEST" ] || [ $# -ne 0 ]; then
        usage
    fi
    export_from_documentation "$EXPORT_FILE" "$EXPORT_DEST"
    exit $?
fi

usage
